local dirbuf = require("dirbuf")

describe("dirbuf", function()
  describe("parse_line", function()
    it("simple line", function()
      local fname, hash = dirbuf.parse_line([[README.md  #dedbeef]])
      assert.equal(fname, "README.md")
      assert.equal(hash, "dedbeef")
    end)

    it("escaped spaces", function()
      local fname, hash = dirbuf.parse_line([[\ a\ b\ c\   #0123456]])
      assert.equal(fname, " a b c ")
      assert.equal(hash, "0123456")
    end)

    it("escaped backslashes", function()
      local fname, hash = dirbuf.parse_line([[before\\after  #0123456]])
      assert.equal(fname, [[before\after]])
      assert.equal(hash, "0123456")
    end)

    it("invalid escape sequence", function()
      assert.has_error(function() dirbuf.parse_line([[\a  #0123456]]) end)
    end)

    it("only hash", function()
      dirbuf.parse_line([[#0123456]])
      assert.has_error(function() dirbuf.parse_line([[#0123456]]) end)
    end)

    it("invalid hash", function()
      assert.has_error(function() dirbuf.parse_line([[foo #012345]]) end)
      assert.has_error(function() dirbuf.parse_line([[foo #01234567]]) end)
      assert.has_error(function() dirbuf.parse_line([[foo #012345z]]) end)
    end)

    it("leading space", function()
      assert.has_error(function() dirbuf.parse_line([[ foo #0123456]]) end)
    end)

    it("extra token", function()
      assert.has_error(function() dirbuf.parse_line([[foo bar #0123456]]) end)
    end)

    it("non-ASCII fnames", function()
      local fname, hash = dirbuf.parse_line([[文档  #0123456]])
      assert.equal(fname, "文档")
      assert.equal(hash, "0123456")
    end)
  end)
end)
